<?php

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_idpay_commerce_payment_method_info() {
  $payment_methods = array();
  $payment_methods['commerce_idpay'] = array(
    'method_id' => 'commerce_idpay',
    'title' => t('IDPay Gateway'),
    'display_title' => t('IDPay'),
    'short_title' => t('IDPay'),
    'description' => t('Uses idpay.ir payment gateway.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => TRUE,
  );
  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_idpay_settings_form($settings = NULL) {

  $form = array();
  $form['api_key'] = array(
    '#type' => 'textfield',
    '#title' => t('API Key'),
    '#default_value' => $settings['api_key'],
    '#description' => t('You can obtain an API Key from https://idpay.ir/dashboard/web-services'),
  );
  $form['sandbox'] = array(
    '#type' => 'checkbox',
    '#title' => t('Sandbox'),
    '#default_value' => isset($settings['sandbox']) ? $settings['sandbox'] : 1,
    '#description' => t("If you want to use this gateway in debug (test) mode, check this option."),
  );
  return $form;
}

/**
 * Payment method callback: redirect form.
 *
 * See https://idpay.ir/web-service for the gateway documentation.
 */
function commerce_idpay_redirect_form($form, &$form_state, $order, $payment_method) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = (int) ($wrapper->commerce_order_total->amount->value());
  $amount_decimal = commerce_currency_amount_to_decimal($amount, $currency_code);

  // Since the gateway accept just Iranian Rilas (IRR), if the order currency is based on
  // Iranian Toman (TMN), we must convert it to IRR.
  // (10 Rials are equal to 1 Toman) .
  // For enabling the TMN on your site, you can clone this sandbox module created by Ahmad Hejazee:
  // https://www.drupal.org/sandbox/hejazee/1861440
  if ($currency_code == 'TMN') {
    $amount_decimal *= 10;
  }

  // The callback url when the user is brought back to the website from the payment gateway.
  // We must sent it to te gateway for the first time before we go to the gateway page.
  $callback = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], ['absolute' => TRUE]);

  // Gateway endpoint.
  $url = 'https://api.idpay.ir/v1/payment';
  $params = array(
    'order_id' => $order->order_id,
    'amount' => $amount_decimal,
    'phone' => '',
    'desc' => t('Order number #') . $order->order_id,
    'callback' => $callback,
  );

  $headers = array(
    'Content-Type' => 'application/json',
    'X-API-KEY' => $payment_method['settings']['api_key'],
    'X-SANDBOX' => ($payment_method['settings']['sandbox'] ? 'true' : 'false'),
  );

  try {
    $response = drupal_http_request($url, array(
      'method' => 'POST',
      'headers' => $headers,
      'data' => json_encode($params),
    ));

    if ($response->code == 201) {
      // When everything is ok, we must redirect to the link that is generated by the gateway.
      // Otherwise we will be brought back to the review page.
      $result = json_decode($response->data);
      if (is_object($result) && $result->link) {
        $form['#action'] = $result->link;
      }
    }
    else {
      drupal_set_message(t('Cannot communicate with the gateway.'), 'error');
      watchdog('commerce_idpay',
        'An error is occurred with code: %code and message: @message when accessing the payment endpoint: !url.',
        array(
          '%code' => $response->code,
          '@message' => $response->data,
          '!url' => $url,
        ),
        WATCHDOG_ERROR);
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto('checkout/' . $order->order_id . '/review');
    }

  } catch (\Exception $e) {
    drupal_set_message(t($e->getMessage()), 'error');
    commerce_payment_redirect_pane_previous_page($order);
    drupal_goto('checkout/' . $order->order_id . '/review');
  }

  return $form;
}

/**
 * Payment method callback: redirect form validate.
 *
 * See https://idpay.ir/web-service for the gateway documentation.
 */
function commerce_idpay_redirect_form_validate($order, $payment_method) {
  $status = $_POST['status'];
  $track_id = $_POST['track_id'];
  $id = $_POST['id'];
  $order_id = $_POST['order_id'];
  $amount = $_POST['amount'];
  $date = $_POST['date'];

  if (commerce_idpay_check_double_spending($id)) {
    drupal_set_message(t('Double spending occurred.'), 'error');
    return FALSE;
  }
  // Gateway endpoint.
  $url = 'https://api.idpay.ir/v1/payment/inquiry';
  $params = array(
    'id' => $id,
    'order_id' => $order_id,
  );

  $headers = array(
    'Content-Type' => 'application/json',
    'X-API-KEY' => $payment_method['settings']['api_key'],
    'X-SANDBOX' => ($payment_method['settings']['sandbox'] ? 'true' : 'false'),
  );

  try {
    $response = drupal_http_request($url, array(
      'method' => 'POST',
      'headers' => $headers,
      'data' => json_encode($params),
    ));

    if ($response->code == 200) {
      // In this case the gateway will send a message in json format.
      $result = json_decode($response->data);
      if ($result->status == 100) {
        // According to the gateway documentation, when the status is equal to 100,
        // the payment is successful.
        // Therefore we will save the transaction as a successful of one.
        // Otherwise we will save it as a failed transaction.
        commerce_idpay_transaction($payment_method, $order, $result->id, $result->track_id, $result->status, COMMERCE_PAYMENT_STATUS_SUCCESS);
        commerce_payment_redirect_pane_next_page($order);
        drupal_set_message("Payment succeeded.");
        return TRUE;
      }
      else {
        commerce_idpay_transaction($payment_method, $order, $result->id, $result->track_id, $result->status, COMMERCE_PAYMENT_STATUS_FAILURE);
        commerce_payment_redirect_pane_previous_page($order);
        drupal_set_message("Payment failed.", 'error');
        return FALSE;
      }
    }
    elseif ($response->code >= 400 && $response->code < 500) {
      // In this case the gateway will send an error in the plain text as well as an error code.
      drupal_set_messsage(t('Payment failed.'), 'error');
      watchdog('commerce_idpay',
        'Payment failed. This is due to error with code: %code and message: @message',
        array(
          '%code' => $response->code,
          '@message' => $response->data,
        ),
        WATCHDOG_ERROR
      );
      commerce_idpay_transaction($payment_method, $order, $id, $track_id, $status, COMMERCE_PAYMENT_STATUS_FAILURE);
      commerce_payment_redirect_pane_previous_page($order);
      return FALSE;
    }
    elseif ($response->code >= 500) {
      drupal_set_messsage(t('Payment failed.'), 'error');
      watchdog('commerce_idpay',
        'Payment not proceed. This is due to error with code: %code',
        array(
          '%code' => $response->code,
        ),
        WATCHDOG_ERROR
      );
      commerce_idpay_transaction($payment_method, $order, $id, $track_id, $status, COMMERCE_PAYMENT_STATUS_FAILURE);
      commerce_payment_redirect_pane_previous_page($order);

    }

  } catch (\Exception $e) {
    drupal_set_message(t($e->getMessage()), 'error');
    commerce_payment_redirect_pane_previous_page($order);
  }

}

/**
 * Helper function for saving a transaction.
 *
 * @param $payment_method
 * @param $order
 * @param $id
 *  remote id generated by the gateway
 * @param $track_id
 *  track_id generated by the gateway.
 * @param $remote_status
 *  gateway status code for the payment.
 * @param $status
 *  internal Drupal Commerce status for the payment.
 */
function commerce_idpay_transaction($payment_method, $order, $id, $track_id, $remote_status, $status) {
  $wrapper = entity_metadata_wrapper('commerce_order', $order);
  $currency_code = $wrapper->commerce_order_total->currency_code->value();
  $amount = (int) ($wrapper->commerce_order_total->amount->value());

  $transaction = commerce_payment_transaction_new('commerce_idpay', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $amount;
  $transaction->currency_code = $currency_code;
  $transaction->remote_id = $id;
  $transaction->remote_status = $remote_status;
  $transaction->status = $status;

  if ($status == COMMERCE_PAYMENT_STATUS_SUCCESS) {
    $transaction->message = 'successful (id: @id, track_id: @track_id, status: @remote_status)';
  }
  elseif ($status == COMMERCE_PAYMENT_STATUS_FAILURE) {
    $transaction->message = 'failed (id: @id, track_id: @track_id, status: @remote_status)';
  }
  $transaction->message_variables = array(
    '@id' => $id,
    '@track_id' => $track_id,
    '@remote_status' => $remote_status,
  );
  commerce_payment_transaction_save($transaction);
}

/**
 * Helper function to distinguish whether a payment
 * has been previously done in the gateway or not.
 *
 * @param $id
 *  remote id generated by the gateway.
 *
 * @return bool
 */
function commerce_idpay_check_double_spending($id) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'commerce_payment_transaction')
    ->entityCondition('bundle', 'commerce_idpay')
    ->propertyCondition('remote_id', $id);
  $result = $query->execute();
  if (isset($result['commerce_payment_transaction'])) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}
